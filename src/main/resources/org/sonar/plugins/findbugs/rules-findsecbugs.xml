<rules><!-- This file is auto-generated. -->
  <rule key='PREDICTABLE_RANDOM' priority='MAJOR'>
    <name>Security - Predictable Pseudo Random Number Generator</name>
    <configKey>PREDICTABLE_RANDOM</configKey>
    <description>&lt;p&gt;The use of a predictable random value can lead to vulnerabilities when used in certain security critical contexts. For example, when the value is used as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a CSRF token&lt;/li&gt;
&lt;li&gt;a password reset token (sent by email)&lt;/li&gt;
&lt;li&gt;any other secret value&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;
A quick fix could be to replace the use of &lt;b&gt;java.util.Random&lt;/b&gt; with something stronger, such as &lt;b&gt;java.security.SecureRandom&lt;/b&gt;.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;String generateSecretToken() {
    Random r = new Random();
    return Long.toHexString(r.nextLong());
}&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Solution:&lt;/b&gt;
&lt;pre&gt;import org.apache.commons.codec.binary.Hex;

String generateSecretToken() {
    SecureRandom secRandom = new SecureRandom();

    byte[] result = new byte[32];
    secRandom.nextBytes(result);
    return Hex.encodeHexString(result);
}&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://jazzy.id.au/default/2010/09/20/cracking_random_number_generators_part_1.html"&gt;Cracking Random Number Generators - Part 1 (http://jazzy.id.au)&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.securecoding.cert.org/confluence/display/java/MSC02-J.+Generate+strong+random+numbers"&gt;CERT: MSC02-J. Generate strong random numbers&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/330.html"&gt;CWE-330: Use of Insufficiently Random Values&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.h3xstream.com/2014/12/predicting-struts-csrf-token-cve-2014.html"&gt;Predicting Struts CSRF Token (Example of real-life vulnerability and exploitation)&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_PARAMETER' priority='INFO'>
    <name>Security - Untrusted Servlet Parameter</name>
    <configKey>SERVLET_PARAMETER</configKey>
    <description>&lt;p&gt;The Servlet can read GET and POST parameters from various methods. The value obtained should be considered unsafe.
You may need to validate or sanitize those values before passing them to sensitive APIs such as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SQL query (May lead to SQL injection)&lt;/li&gt;
&lt;li&gt;File opening (May lead to path traversal)&lt;/li&gt;
&lt;li&gt;Command execution (Potential Command injection)&lt;/li&gt;
&lt;li&gt;HTML construction (Potential XSS)&lt;/li&gt;
&lt;li&gt;etc...&lt;/li&gt;
&lt;/ul&gt;

&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_CONTENT_TYPE' priority='INFO'>
    <name>Security - Untrusted Content-Type Header</name>
    <configKey>SERVLET_CONTENT_TYPE</configKey>
    <description>&lt;p&gt;
The HTTP header Content-Type can be controlled by the client. As such, its value should not be used in any security critical decisions.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/807.html"&gt;CWE-807: Untrusted Inputs in a Security Decision&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_SERVER_NAME' priority='INFO'>
    <name>Security - Untrusted Hostname Header</name>
    <configKey>SERVLET_SERVER_NAME</configKey>
    <description>&lt;p&gt;The hostname header can be controlled by the client. As such, its value should not be used in any security critical decisions.
Both &lt;code&gt;ServletRequest.getServerName()&lt;/code&gt; and &lt;code&gt;HttpServletRequest.getHeader("Host")&lt;/code&gt; have the same
behavior which is to extract the &lt;code&gt;Host&lt;/code&gt; header.&lt;/p&gt;
&lt;pre&gt;
GET /testpage HTTP/1.1
Host: www.example.com
[...]&lt;/pre&gt;
&lt;p&gt;
The web container serving your application may redirect requests to your application by default. This would allow
a malicious user to place any value in the Host header. It is recommended that you do not trust this value in any security
decisions you make with respect to a request.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/807.html"&gt;CWE-807: Untrusted Inputs in a Security Decision&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_SESSION_ID' priority='INFO'>
    <name>Security - Untrusted Session Cookie Value</name>
    <configKey>SERVLET_SESSION_ID</configKey>
    <description>&lt;p&gt;
The method &lt;a href="http://docs.oracle.com/javaee/6/api/javax/servlet/http/HttpServletRequest.html#getRequestedSessionId()"&gt;&lt;code&gt;HttpServletRequest.getRequestedSessionId()&lt;/code&gt;&lt;/a&gt;
typically returns the value of the cookie &lt;code&gt;JSESSIONID&lt;/code&gt;. This value is normally only accessed by the session management logic and not normal developer code.
&lt;/p&gt;
&lt;p&gt;
The value passed to the client is generally an alphanumeric value (e.g., &lt;code&gt;JSESSIONID=jp6q31lq2myn&lt;/code&gt;). However, the value can be altered by the client.
The following HTTP request illustrates the potential modification.
&lt;pre&gt;
GET /somePage HTTP/1.1
Host: yourwebsite.com
User-Agent: Mozilla/5.0
Cookie: JSESSIONID=Any value of the user&amp;#39;s choice!!??'''&amp;quot;&amp;gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;As such, the JSESSIONID should only be used to see if its value matches an existing session ID. If it does not, the user should be
considered an unauthenticated user. In addition, the session ID value should never be logged. If it is, then the log file could contain
valid active session IDs, allowing an insider to hijack any sessions whose IDs have been logged and are still active.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Session_Management_Cheat_Sheet"&gt;OWASP: Session Management Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;

&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_QUERY_STRING' priority='INFO'>
    <name>Security - Untrusted Query String</name>
    <configKey>SERVLET_QUERY_STRING</configKey>
    <description>&lt;p&gt;The query string is the concatenation of the GET parameter names and values. Parameters other than those intended can
be passed in.&lt;/p&gt;
&lt;p&gt;For the URL request &lt;code&gt;/app/servlet.htm?a=1&amp;b=2&lt;/code&gt;, the query string extract will be &lt;code&gt;a=1&amp;b=2&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Just as is true for individual parameter values retrieved via methods like &lt;code&gt;HttpServletRequest.getParameter()&lt;/code&gt;,
the value obtained from &lt;code&gt;HttpServletRequest.getQueryString()&lt;/code&gt; should be considered unsafe.
You may need to validate or sanitize anything pulled from the query string before passing it to sensitive APIs.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_HEADER' priority='INFO'>
    <name>Security - HTTP Headers Untrusted</name>
    <configKey>SERVLET_HEADER</configKey>
    <description>&lt;p&gt;Request headers can easily be altered by the requesting user. In general, no assumption should be made that
the request came from a regular browser without modification by an attacker. As such, it is recommended that you
not trust this value in any security decisions you make with respect to a request.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/807.html"&gt;CWE-807: Untrusted Inputs in a Security Decision&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_HEADER_REFERER' priority='INFO'>
    <name>Security - Untrusted Referer Header</name>
    <configKey>SERVLET_HEADER_REFERER</configKey>
    <description>&lt;p&gt;
Behavior:
&lt;ul&gt;
&lt;li&gt;Any value can be assigned to this header if the request is coming from a malicious user.&lt;/li&gt;
&lt;li&gt;The "Referer" will not be present if the request was initiated from another origin that is secure (https).&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
Recommendations:
&lt;ul&gt;
&lt;li&gt;No access control should be based on the value of this header.&lt;/li&gt;
&lt;li&gt;No CSRF protection should be based only on this value (&lt;a href="http://www.w3.org/Protocols/HTTP/HTRQ_Headers.html#z14"&gt;because it is optional&lt;/a&gt;).&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/807.html"&gt;CWE-807: Untrusted Inputs in a Security Decision&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SERVLET_HEADER_USER_AGENT' priority='INFO'>
    <name>Security - Untrusted User-Agent Header</name>
    <configKey>SERVLET_HEADER_USER_AGENT</configKey>
    <description>&lt;p&gt;The header "User-Agent" can easily be spoofed by the client. Adopting different behaviors based on the User-Agent (for
crawler UA) is not recommended.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/807.html"&gt;CWE-807: Untrusted Inputs in a Security Decision&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='COOKIE_USAGE' priority='INFO'>
    <name>Security - Potentially Sensitive Data in Cookie</name>
    <configKey>COOKIE_USAGE</configKey>
    <description>&lt;p&gt;The information stored in a custom cookie should not be sensitive or related to the session. In most cases, sensitive data should only be stored in session
and referenced by the user's session cookie. See HttpSession (HttpServletRequest.getSession())&lt;/p&gt;
&lt;p&gt;Custom cookies can be used for information that needs to live longer than and is independent of a specific session.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/315.html"&gt;CWE-315: Cleartext Storage of Sensitive Information in a Cookie&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='PATH_TRAVERSAL_IN' priority='MAJOR'>
    <name>Security - Potential Path Traversal (File Read)</name>
    <configKey>PATH_TRAVERSAL_IN</configKey>
    <description>&lt;p&gt;A file is opened to read its content. The filename comes from an &lt;b&gt;input&lt;/b&gt; parameter.
If an unfiltered parameter is passed to this file API, files from an arbitrary filesystem location could be read.&lt;/p&gt;
&lt;p&gt;This rule identifies &lt;b&gt;potential&lt;/b&gt; path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal"&gt;WASC: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Path_Traversal"&gt;OWASP: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://capec.mitre.org/data/definitions/126.html"&gt;CAPEC-126: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/22.html"&gt;CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a4</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='PATH_TRAVERSAL_OUT' priority='MAJOR'>
    <name>Security - Potential Path Traversal (File Write)</name>
    <configKey>PATH_TRAVERSAL_OUT</configKey>
    <description>&lt;p&gt;A file is opened to write to its contents. The filename comes from an &lt;b&gt;input&lt;/b&gt; parameter.
If an unfiltered parameter is passed to this file API, files at an arbitrary filesystem location could be modified.&lt;/p&gt;
&lt;p&gt;This rule identifies &lt;b&gt;potential&lt;/b&gt; path traversal vulnerabilities. In many cases, the constructed file path cannot be controlled
by the user. If that is the case, the reported instance is a false positive.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal"&gt;WASC-33: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Path_Traversal"&gt;OWASP: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://capec.mitre.org/data/definitions/126.html"&gt;CAPEC-126: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/22.html"&gt;CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a4</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='COMMAND_INJECTION' priority='CRITICAL'>
    <name>Security - Potential Command Injection</name>
    <configKey>COMMAND_INJECTION</configKey>
    <description>&lt;p&gt;The highlighted API is used to execute a system command. If unfiltered input is passed to this API, it can lead to arbitrary command execution.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Command_Injection"&gt;OWASP: Command Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection"&gt;OWASP: Top 10 2013-A1-Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/78.html"&gt;CWE-78: Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='WEAK_FILENAMEUTILS' priority='INFO'>
    <name>Security - FilenameUtils Not Filtering Null Bytes</name>
    <configKey>WEAK_FILENAMEUTILS</configKey>
    <description>&lt;p&gt;Some FilenameUtils' methods don't filter NULL bytes (&lt;code&gt;0x00&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;If a null byte is injected into a filename, if this filename is passed to the underlying OS, the file retrieved will be the
name of the file that is specified prior to the NULL byte, since at the OS level, all strings are terminated by a null byte even
though Java itself doesn't care about null bytes or treat them special. This OS behavior can be used to bypass filename validation
that looks at the end of the filename (e.g., endswith ".log") to make sure its a safe file to access.&lt;/p&gt;
&lt;p&gt;To fix this, two things are recommended:
&lt;ul&gt;
&lt;li&gt;Upgrade to Java 7 update 40 or later, or Java 8+ since
&lt;a href="http://bugs.java.com/bugdatabase/view_bug.do?bug_id=8014846"&gt;NULL byte injection in filenames is fixed in those versions&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Strongly validate any filenames provided by untrusted users to make sure they are valid (i.e., don't contain null, don't include path characters, etc.)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you know you are using a modern version of Java immune to NULL byte injection, you can probably disable this rule.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246949/Null%20Byte%20Injection"&gt;WASC-28: Null Byte Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/158.html"&gt;CWE-158: Improper Neutralization of Null Byte or NUL Character&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='WEAK_TRUST_MANAGER' priority='MAJOR'>
    <name>Security - TrustManager Implementation Empty</name>
    <configKey>WEAK_TRUST_MANAGER</configKey>
    <description>&lt;p&gt;Empty TrustManager implementations are often used to connect easily to a host that is not signed by a root
&lt;a href="http://en.wikipedia.org/wiki/Certificate_authority"&gt;certificate authority&lt;/a&gt;. As a consequence, this is vulnerable to
&lt;a href="http://en.wikipedia.org/wiki/Man-in-the-middle_attack"&gt;Man-in-the-middle attacks&lt;/a&gt;
since the client will trust any certificate.
&lt;/p&gt;
&lt;p&gt;
A TrustManager allowing specific certificates (based on a truststore for example) should be built.
Detailed information for a proper implementation is at:
&lt;a href="http://stackoverflow.com/a/6378872/89769"&gt;[1]&lt;/a&gt;
&lt;a href="http://stackoverflow.com/a/5493452/89769"&gt;[2]&lt;/a&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection"&gt;WASC-04: Insufficient Transport Layer Protection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/295.html"&gt;CWE-295: Improper Certificate Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='JAXWS_ENDPOINT' priority='INFO'>
    <name>Security - Found JAX-WS SOAP Endpoint</name>
    <configKey>JAXWS_ENDPOINT</configKey>
    <description>&lt;p&gt;This method is part of a SOAP Web Service (JSR224).&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;The security of this web service should be analyzed. For example:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Authentication, if enforced, should be tested.&lt;/li&gt;
&lt;li&gt;Access control, if enforced, should be tested.&lt;/li&gt;
&lt;li&gt;The inputs should be tracked for potential vulnerabilities.&lt;/li&gt;
&lt;li&gt;The communication should ideally be over SSL.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet"&gt;OWASP: Web Service Security Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='JAXRS_ENDPOINT' priority='INFO'>
    <name>Security - Found JAX-RS REST Endpoint</name>
    <configKey>JAXRS_ENDPOINT</configKey>
    <description>&lt;p&gt;This method is part of a REST Web Service (JSR311).&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;The security of this web service should be analyzed. For example:&lt;/b&gt;
&lt;ul&gt;
&lt;li&gt;Authentication, if enforced, should be tested.&lt;/li&gt;
&lt;li&gt;Access control, if enforced, should be tested.&lt;/li&gt;
&lt;li&gt;The inputs should be tracked for potential vulnerabilities.&lt;/li&gt;
&lt;li&gt;The communication should ideally be over SSL.&lt;/li&gt;
&lt;li&gt;If the service supports writes (e.g., via POST), its vulnerability to CSRF should be investigated.&lt;sup&gt;[1]&lt;/sup&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/REST_Assessment_Cheat_Sheet"&gt;OWASP: REST Assessment Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/REST_Security_Cheat_Sheet"&gt;OWASP: REST Security Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Web_Service_Security_Cheat_Sheet"&gt;OWASP: Web Service Security Cheat Sheet&lt;/a&gt;&lt;br/&gt;
1. &lt;a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)"&gt;OWASP: Cross-Site Request Forgery&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29_Prevention_Cheat_Sheet"&gt;OWASP: CSRF Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='TAPESTRY_ENDPOINT' priority='INFO'>
    <name>Security - Found Tapestry Page</name>
    <configKey>TAPESTRY_ENDPOINT</configKey>
    <description>&lt;p&gt;A Tapestry endpoint was discovered at application startup. Tapestry apps are structured with a backing Java class and a corresponding
Tapestry Markup Language page (a .tml file) for each page. When a request is received, the GET/POST parameters are mapped to specific
inputs in the backing Java class. The mapping is either done with fieldName:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    [...]
    protected String input;
    [...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or the definition of an explicit annotation:
&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;
    [...]
    @org.apache.tapestry5.annotations.Parameter
    protected String parameter1;

    @org.apache.tapestry5.annotations.Component(id = "password")
    private PasswordField passwordField;
    [...]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The page is mapped to the view &lt;code&gt;[/resources/package/PageName].tml.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Each Tapestry page in this application should be researched to make sure all inputs that are automatically
mapped in this way are properly validated before they are used.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://tapestry.apache.org/"&gt;Apache Tapestry Home Page&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='WICKET_ENDPOINT' priority='INFO'>
    <name>Security - Found Wicket Page</name>
    <configKey>WICKET_ENDPOINT</configKey>
    <description>&lt;p&gt;This class represents a Wicket WebPage. Input is automatically read from a PageParameters instance passed to the constructor.
The current page is mapped to the view [/package/WebPageName].html.&lt;/p&gt;
&lt;p&gt;Each Wicket page in this application should be researched to make sure all inputs that are automatically
mapped in this way are properly validated before they are used.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://wicket.apache.org/"&gt;Apache Wicket Home Page&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='WEAK_MESSAGE_DIGEST' priority='MAJOR'>
    <name>Security - MessageDigest Is Weak</name>
    <configKey>WEAK_MESSAGE_DIGEST</configKey>
    <description>&lt;p&gt;The algorithm used is not a recommended MessageDigest.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html"&gt;NIST&lt;/a&gt; recommends the use of SHA-1, SHA-224*, SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;* SHA-224 algorithm is not provided by &lt;a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SUNProvider"&gt; SUN provider.&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;Upgrade your implementation to use one of the approved algorithms. Use an algorithm that is sufficiently strong for your specific security needs.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html"&gt;NIST Approved Hashing Algorithms&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/327.html"&gt;CWE-327: Use of a Broken or Risky Cryptographic Algorithm&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='CUSTOM_MESSAGE_DIGEST' priority='MAJOR'>
    <name>Security - MessageDigest Is Custom</name>
    <configKey>CUSTOM_MESSAGE_DIGEST</configKey>
    <description>&lt;p&gt;Implementing a custom MessageDigest is error-prone.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html"&gt;NIST&lt;/a&gt; recommends the use of SHA-1, SHA-224*, SHA-256, SHA-384, SHA-512, SHA-512/224, or SHA-512/256.&lt;/p&gt;
&lt;p&gt;&lt;small&gt;* SHA-224 algorithm is not provided by &lt;a href="http://docs.oracle.com/javase/6/docs/technotes/guides/security/SunProviders.html#SUNProvider"&gt; SUN provider.&lt;/a&gt;&lt;/small&gt;&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;MyProprietaryMessageDigest extends MessageDigest {
    @Override
    protected byte[] engineDigest() {
        [...]
        //Creativity is a bad idea
        return [...];
    }
}&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;Upgrade your implementation to use one of the approved algorithms. Use an algorithm that is sufficiently strong for your specific security needs.&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Example Solution:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;MessageDigest sha256Digest = MessageDigest.getInstance("SHA256");
sha256Digest.update(password.getBytes());&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://csrc.nist.gov/groups/ST/toolkit/secure_hashing.html"&gt;NIST Approved Hashing Algorithms&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/327.html"&gt;CWE-327: Use of a Broken or Risky Cryptographic Algorithm&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='FILE_UPLOAD_FILENAME' priority='INFO'>
    <name>Security - Tainted Filename Read</name>
    <configKey>FILE_UPLOAD_FILENAME</configKey>
    <description>&lt;p&gt;The filename provided by the FileUpload API can be tampered with by the client to reference unauthorized files.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;"../../../config/overide_file"&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;"shell.jsp\u0000expected.gif"&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Therefore, such values should not be passed directly to the filesystem API. If acceptable, the application should generate its
own file names and use those. Otherwise, the provided filename should be properly validated to ensure it's properly structured,
contains no unauthorized path characters (e.g., / \), and refers to an authorized file.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://blogs.securiteam.com/index.php/archives/1268"&gt;Securiteam: File upload security recommendations&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/22.html"&gt;CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246952/Path%20Traversal"&gt;WASC-33: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Path_Traversal"&gt;OWASP: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://capec.mitre.org/data/definitions/126.html"&gt;CAPEC-126: Path Traversal&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/22.html"&gt;CWE-22: Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a4</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='REDOS' priority='MAJOR'>
    <name>Security - Regex DOS (ReDOS)</name>
    <configKey>REDOS</configKey>
    <description>&lt;p&gt;
    Regular expressions (regexs) are frequently subject to Denial of Service (DOS) attacks (called ReDOS). This is due to the fact that regex engines
    may take a large amount of time when analyzing certain strings, depending on how the regex is defined.
&lt;p&gt;
    For example, for the regex: &lt;b&gt;^(a+)+$&lt;/b&gt;, the input "&lt;code&gt;aaaaaaaaaaaaaaaaX&lt;/code&gt;" will cause the regex engine to analyze 65536
different paths.&lt;sup&gt;[1] Example taken from OWASP references&lt;/sup&gt;&lt;/p&gt;
&lt;p&gt;
Therefore, it is possible that a single request may cause a large amount of computation on the server side.
The problem with this regex, and others like it, is that there are two different ways the same input character can be accepted by the
Regex due to the + (or a *) inside the parenthesis, and the + (or a *) outside the parenthesis. The way this is written, either + could
consume the character 'a'. To fix this, the regex should be rewritten to eliminate the ambiguity. For example, this could simply be
rewritten as: &lt;b&gt;^a+$&lt;/b&gt;, which is presumably what the author meant anyway (any number of a's). Assuming that's what the original
regex meant, this new regex can be evaluated quickly, and is not subject to ReDOS.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://www.jroller.com/sebastianKuebeck/entry/detecting_and_preventing_redos_vulnerabilities"&gt;Sebastian Kubeck's Weblog: Detecting and Preventing ReDoS Vulnerabilities&lt;/a&gt;&lt;br/&gt;
&lt;sup&gt;[1]&lt;/sup&gt; &lt;a href="https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS"&gt;OWASP: Regular expression Denial of Service&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/400.html"&gt;CWE-400: Uncontrolled Resource Consumption ('Resource Exhaustion')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XXE_SAXPARSER' priority='CRITICAL'>
    <name>Security - XML Parsing Vulnerable to XXE (SAXParser)</name>
    <configKey>XXE_SAXPARSER</configKey>
    <description>&lt;!--XXE_GENERIC_START--&gt;
&lt;h3&gt;Attack&lt;/h3&gt;
&lt;p&gt;XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Risk 1: Expose local file content (XXE: &lt;u&gt;X&lt;/u&gt;ML e&lt;u&gt;X&lt;/u&gt;ternal &lt;u&gt;E&lt;/u&gt;ntity)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE foo [
   &amp;lt;!ENTITY xxe SYSTEM &amp;quot;file:///etc/passwd&amp;quot; &amp;gt; ]&amp;gt;
&amp;lt;foo&amp;gt;&amp;amp;xxe;&amp;lt;/foo&amp;gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;b&gt;Risk 2: Denial of service (XEE: &lt;u&gt;X&lt;/u&gt;ml &lt;u&gt;E&lt;/u&gt;ntity &lt;u&gt;E&lt;/u&gt;xpansion)&lt;/b&gt;
&lt;p&gt;
&lt;pre&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE lolz [
 &amp;lt;!ENTITY lol &amp;quot;lol&amp;quot;&amp;gt;
 &amp;lt;!ELEMENT lolz (#PCDATA)&amp;gt;
 &amp;lt;!ENTITY lol1 &amp;quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;quot;&amp;gt;
 &amp;lt;!ENTITY lol2 &amp;quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;quot;&amp;gt;
 &amp;lt;!ENTITY lol3 &amp;quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;quot;&amp;gt;
[...]
 &amp;lt;!ENTITY lol9 &amp;quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;quot;&amp;gt;
]&amp;gt;
&amp;lt;lolz&amp;gt;&amp;lol9;&amp;lt;/lolz&amp;gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
&lt;/p&gt;
&lt;!--XXE_GENERIC_END--&gt;

&lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
SAXParser parser = SAXParserFactory.newInstance().newSAXParser();

parser.parse(inputStream, customHandler);&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution using "Secure processing" mode:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
SAXParserFactory spf = SAXParserFactory.newInstance();
spf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
SAXParser parser = spf.newSAXParser();

parser.parse(inputStream, customHandler);&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution disabling DTD:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
SAXParserFactory spf = SAXParserFactory.newInstance();
spf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
SAXParser parser = spf.newSAXParser();

parser.parse(inputStream, customHandler);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;!--XXE_GENERIC_START--&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/611.html"&gt;CWE-611: Improper Restriction of XML External Entity Reference ('XXE')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260"&gt;CERT: IDS10-J. Prevent XML external entity attacks&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing"&gt;OWASP.org: XML External Entity (XXE) Processing&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion"&gt;WS-Attacks.org: XML Entity Expansion&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS"&gt;WS-Attacks.org: XML External Entity DOS&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack"&gt;WS-Attacks.org: XML Entity Reference Attack&lt;/a&gt;&lt;br/&gt;
&lt;!--XXE_GENERIC_END--&gt;
&lt;a href="http://xerces.apache.org/xerces-j/features.html"&gt;Xerces complete features list&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XXE_XMLREADER' priority='CRITICAL'>
    <name>Security - XML Parsing Vulnerable to XXE (XMLReader)</name>
    <configKey>XXE_XMLREADER</configKey>
    <description>&lt;!--XXE_GENERIC_START--&gt;
&lt;h3&gt;Attack&lt;/h3&gt;
&lt;p&gt;XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Risk 1: Expose local file content (XXE: &lt;u&gt;X&lt;/u&gt;ML e&lt;u&gt;X&lt;/u&gt;ternal &lt;u&gt;E&lt;/u&gt;ntity)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE foo [
   &amp;lt;!ENTITY xxe SYSTEM &amp;quot;file:///etc/passwd&amp;quot; &amp;gt; ]&amp;gt;
&amp;lt;foo&amp;gt;&amp;amp;xxe;&amp;lt;/foo&amp;gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;b&gt;Risk 2: Denial of service (XEE: &lt;u&gt;X&lt;/u&gt;ml &lt;u&gt;E&lt;/u&gt;ntity &lt;u&gt;E&lt;/u&gt;xpansion)&lt;/b&gt;
&lt;p&gt;
&lt;pre&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE lolz [
 &amp;lt;!ENTITY lol &amp;quot;lol&amp;quot;&amp;gt;
 &amp;lt;!ELEMENT lolz (#PCDATA)&amp;gt;
 &amp;lt;!ENTITY lol1 &amp;quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;quot;&amp;gt;
 &amp;lt;!ENTITY lol2 &amp;quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;quot;&amp;gt;
 &amp;lt;!ENTITY lol3 &amp;quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;quot;&amp;gt;
[...]
 &amp;lt;!ENTITY lol9 &amp;quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;quot;&amp;gt;
]&amp;gt;
&amp;lt;lolz&amp;gt;&amp;lol9;&amp;lt;/lolz&amp;gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
&lt;/p&gt;
&lt;!--XXE_GENERIC_END--&gt;

&lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setContentHandler(customHandler);
reader.parse(new InputSource(inputStream));&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution using "Secure processing" mode:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
reader.setContentHandler(customHandler);

reader.parse(new InputSource(inputStream));&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution disabling DTD:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
XMLReader reader = XMLReaderFactory.createXMLReader();
reader.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
reader.setContentHandler(customHandler);

reader.parse(new InputSource(inputStream));&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;!--XXE_GENERIC_START--&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/611.html"&gt;CWE-611: Improper Restriction of XML External Entity Reference ('XXE')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260"&gt;CERT: IDS10-J. Prevent XML external entity attacks&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing"&gt;OWASP.org: XML External Entity (XXE) Processing&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion"&gt;WS-Attacks.org: XML Entity Expansion&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS"&gt;WS-Attacks.org: XML External Entity DOS&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack"&gt;WS-Attacks.org: XML Entity Reference Attack&lt;/a&gt;&lt;br/&gt;
&lt;!--XXE_GENERIC_END--&gt;
&lt;a href="http://xerces.apache.org/xerces-j/features.html"&gt;Xerces complete features list&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XXE_DOCUMENT' priority='CRITICAL'>
    <name>Security - XML Parsing Vulnerable to XXE (DocumentBuilder)</name>
    <configKey>XXE_DOCUMENT</configKey>
    <description>&lt;!--XXE_GENERIC_START--&gt;
&lt;h3&gt;Attack&lt;/h3&gt;
&lt;p&gt;XML External Entity (XXE) attacks can occur when an XML parser supports XML entities while processing XML received
from an untrusted source.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Risk 1: Expose local file content (XXE: &lt;u&gt;X&lt;/u&gt;ML e&lt;u&gt;X&lt;/u&gt;ternal &lt;u&gt;E&lt;/u&gt;ntity)&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;ISO-8859-1&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE foo [
   &amp;lt;!ENTITY xxe SYSTEM &amp;quot;file:///etc/passwd&amp;quot; &amp;gt; ]&amp;gt;
&amp;lt;foo&amp;gt;&amp;amp;xxe;&amp;lt;/foo&amp;gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;b&gt;Risk 2: Denial of service (XEE: &lt;u&gt;X&lt;/u&gt;ml &lt;u&gt;E&lt;/u&gt;ntity &lt;u&gt;E&lt;/u&gt;xpansion)&lt;/b&gt;
&lt;p&gt;
&lt;pre&gt;
&amp;lt;?xml version=&amp;quot;1.0&amp;quot;?&amp;gt;
&amp;lt;!DOCTYPE lolz [
 &amp;lt;!ENTITY lol &amp;quot;lol&amp;quot;&amp;gt;
 &amp;lt;!ELEMENT lolz (#PCDATA)&amp;gt;
 &amp;lt;!ENTITY lol1 &amp;quot;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;quot;&amp;gt;
 &amp;lt;!ENTITY lol2 &amp;quot;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;lol1;&amp;quot;&amp;gt;
 &amp;lt;!ENTITY lol3 &amp;quot;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;quot;&amp;gt;
[...]
 &amp;lt;!ENTITY lol9 &amp;quot;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;quot;&amp;gt;
]&amp;gt;
&amp;lt;lolz&amp;gt;&amp;lol9;&amp;lt;/lolz&amp;gt;&lt;/pre&gt;
&lt;/p&gt;

&lt;h3&gt;Solution&lt;/h3&gt;
&lt;p&gt;
In order to avoid exposing dangerous feature of the XML parser, you can do the following change to the code.
&lt;/p&gt;
&lt;!--XXE_GENERIC_END--&gt;

&lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
DocumentBuilder db = DocumentBuilderFactory.newInstance().newDocumentBuilder();

Document doc = db.parse(input);&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution using "Secure processing" mode:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution disabling DTD:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
dbf.setFeature("http://apache.org/xml/features/disallow-doctype-decl", true);
DocumentBuilder db = dbf.newDocumentBuilder();

Document doc = db.parse(input);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;!--XXE_GENERIC_START--&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/611.html"&gt;CWE-611: Improper Restriction of XML External Entity Reference ('XXE')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61702260"&gt;CERT: IDS10-J. Prevent XML external entity attacks&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/XML_External_Entity_%28XXE%29_Processing"&gt;OWASP.org: XML External Entity (XXE) Processing&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_Entity_Expansion"&gt;WS-Attacks.org: XML Entity Expansion&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_External_Entity_DOS"&gt;WS-Attacks.org: XML External Entity DOS&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.ws-attacks.org/index.php/XML_Entity_Reference_Attack"&gt;WS-Attacks.org: XML Entity Reference Attack&lt;/a&gt;&lt;br/&gt;
&lt;!--XXE_GENERIC_END--&gt;
&lt;a href="http://xerces.apache.org/xerces2-j/features.html"&gt;Xerces2 complete features list&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XPATH_INJECTION' priority='CRITICAL'>
    <name>Security - Potential XPath Injection</name>
    <configKey>XPATH_INJECTION</configKey>
    <description>&lt;p&gt;
XPath injection risks are similar to SQL injection. If the XPath query contains untrusted user input, the complete datasource
could be exposed. This could allow an attacker to access unauthorized data or maliciously modify the target XML.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection"&gt;WASC-39: XPath Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection"&gt;OWASP: Top 10 2013-A1-Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/643.html"&gt;CWE-643: Improper Neutralization of Data within XPath Expressions ('XPath Injection')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.securecoding.cert.org/confluence/pages/viewpage.action?pageId=61407250"&gt;CERT: IDS09-J. Prevent XPath Injection (archive)&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://media.blackhat.com/bh-eu-12/Siddharth/bh-eu-12-Siddharth-Xpath-WP.pdf"&gt;Black Hat Europe 2012: Hacking XPath 2.0&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.balisage.net/Proceedings/vol7/html/Vlist02/BalisageVol7-Vlist02.html"&gt;Balisage: XQuery Injection&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='STRUTS1_ENDPOINT' priority='INFO'>
    <name>Security - Found Struts 1 Action</name>
    <configKey>STRUTS1_ENDPOINT</configKey>
    <description>&lt;p&gt;This class is a Struts 1 Action.&lt;/p&gt;
&lt;p&gt;Once a request is routed to this controller, a Form object will automatically be instantiated that contains the HTTP parameters.
The use of these parameters should be reviewed to make sure they are used safely.&lt;/p&gt;</description>
    <tag>security</tag>
  </rule>
  <rule key='STRUTS2_ENDPOINT' priority='INFO'>
    <name>Security - Found Struts 2 Endpoint</name>
    <configKey>STRUTS2_ENDPOINT</configKey>
    <description>&lt;p&gt;In Struts 2, the endpoints are Plain Old Java Objects (POJOs) which means no Interface/Class needs to be implemented/extended.&lt;/p&gt;
&lt;p&gt;When a request is routed to its controller (like the selected class), the supplied HTTP parameters are automatically mapped to setters for
the class. Therefore, all setters of this class should be considered as untrusted input even if the form doesn't include those values.
An attacker can simply provide additional values in the request, and they will be set in the object anyway, as long as that object has
such a setter. The use of these parameters should be reviewed to make sure they are used safely.&lt;/p&gt;</description>
    <tag>security</tag>
  </rule>
  <rule key='SPRING_ENDPOINT' priority='INFO'>
    <name>Security - Found Spring Endpoint</name>
    <configKey>SPRING_ENDPOINT</configKey>
    <description>&lt;p&gt;This class is a Spring Controller. All methods annotated with &lt;code&gt;RequestMapping&lt;/code&gt; are reachable remotely.
This class should be analyzed to make sure that remotely exposed methods are safe to expose to potential attackers.&lt;/p&gt;</description>
    <tag>security</tag>
  </rule>
  <rule key='SQL_INJECTION_HIBERNATE' priority='CRITICAL'>
    <name>Security - Potential SQL/HQL Injection (Hibernate)</name>
    <configKey>SQL_INJECTION_HIBERNATE</configKey>
    <description>&lt;p&gt;
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
Alternatively to prepare statement, Hibernate Criteria can be used.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
Session session = sessionFactory.openSession();
Query q = session.createQuery("select t from UserEntity t where id = " + input);
q.execute();&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
Session session = sessionFactory.openSession();
Query q = session.createQuery("select t from UserEntity t where id = :userId");
q.setString("userId",input);
q.execute();&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution for dynamic queries (with Hibernate Criteria):&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
Session session = sessionFactory.openSession();
Query q = session.createCriteria(UserEntity.class)
    .add( Restrictions.like("id", input) )
    .list();
q.execute();&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References (Hibernate)&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://docs.jboss.org/hibernate/orm/3.3/reference/en/html/querycriteria.html"&gt;Hibernate Documentation: Query Criteria&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://docs.jboss.org/hibernate/orm/3.2/api/org/hibernate/Query.html"&gt;Hibernate Javadoc: Query Object&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.h3xstream.com/2014/02/hql-for-pentesters.html"&gt;HQL for pentesters&lt;/a&gt;: Guideline to test if the suspected code is exploitable.&lt;br/&gt;
&lt;b&gt;References (SQL injection)&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection"&gt;WASC-19: SQL Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://capec.mitre.org/data/definitions/66.html"&gt;CAPEC-66: SQL Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/89.html"&gt;CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection"&gt;OWASP: Top 10 2013-A1-Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"&gt;OWASP: SQL Injection Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"&gt;OWASP: Query Parameterization Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SQL_INJECTION_JDO' priority='CRITICAL'>
    <name>Security - Potential SQL/JDOQL Injection (JDO)</name>
    <configKey>SQL_INJECTION_JDO</configKey>
    <description>&lt;p&gt;
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
PersistenceManager pm = getPM();

Query q = pm.newQuery("select * from Users where name = " + input);
q.execute();&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
PersistenceManager pm = getPM();

Query q = pm.newQuery("select * from Users where name = nameParam");
q.declareParameters("String nameParam");
q.execute(input);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References (JDO)&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://db.apache.org/jdo/object_retrieval.html"&gt;JDO: Object Retrieval&lt;/a&gt;&lt;br/&gt;
&lt;b&gt;References (SQL injection)&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection"&gt;WASC-19: SQL Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://capec.mitre.org/data/definitions/66.html"&gt;CAPEC-66: SQL Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/89.html"&gt;CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection"&gt;OWASP: Top 10 2013-A1-Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"&gt;OWASP: SQL Injection Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"&gt;OWASP: Query Parameterization Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SQL_INJECTION_JPA' priority='CRITICAL'>
    <name>Security - Potential SQL/JPQL Injection (JPA)</name>
    <configKey>SQL_INJECTION_JPA</configKey>
    <description>&lt;p&gt;
The input values included in SQL queries need to be passed in safely.
Bind variables in prepared statements can be used to easily mitigate the risk of SQL injection.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
EntityManager pm = getEM();

TypedQuery&lt;UserEntity&gt; q = em.createQuery(
    String.format("select * from Users where name = %s", username),
    UserEntity.class);

UserEntity res = q.getSingleResult();&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
TypedQuery&lt;UserEntity&gt; q = em.createQuery(
    "select * from Users where name = usernameParam",UserEntity.class)
    .setParameter("usernameParam", username);

UserEntity res = q.getSingleResult();&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References (JPA)&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://docs.oracle.com/javaee/6/tutorial/doc/bnbrg.html"&gt;The Java EE 6 Tutorial: Creating Queries Using the Java Persistence Query Language&lt;/a&gt;&lt;br/&gt;
&lt;b&gt;References (SQL injection)&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246963/SQL%20Injection"&gt;WASC-19: SQL Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://capec.mitre.org/data/definitions/66.html"&gt;CAPEC-66: SQL Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/89.html"&gt;CWE-89: Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection"&gt;OWASP: Top 10 2013-A1-Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/SQL_Injection_Prevention_Cheat_Sheet"&gt;OWASP: SQL Injection Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Query_Parameterization_Cheat_Sheet"&gt;OWASP: Query Parameterization Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='LDAP_INJECTION' priority='CRITICAL'>
    <name>Security - Potential LDAP Injection</name>
    <configKey>LDAP_INJECTION</configKey>
    <description>&lt;p&gt;
Just like SQL, all inputs passed to an LDAP query need to be passed in safely. Unfortunately, LDAP doesn't have prepared statement interfaces like SQL.
Therefore, the primary defense against LDAP injection is strong input validation of any untrusted data before including it in an LDAP query.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;NamingEnumeration&lt;SearchResult&gt; answers = context.search("dc=People,dc=example,dc=com",
        "(uid=" + username + ")", ctrls);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246947/LDAP%20Injection"&gt;WASC-29: LDAP Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A1-Injection"&gt;OWASP: Top 10 2013-A1-Injection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/90.html"&gt;CWE-90: Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.veracode.com/security/ldap-injection"&gt;LDAP Injection Guide: Learn How to Detect LDAP Injections and Improve LDAP Security&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SCRIPT_ENGINE_INJECTION' priority='CRITICAL'>
    <name>Security - Potential code injection when using Script Engine</name>
    <configKey>SCRIPT_ENGINE_INJECTION</configKey>
    <description>&lt;p&gt;
    Dymanic code is being evaluate. A careful analysis of the code construction should be made. Malicious code execution
    could lead to data leakage or operating system compromised.
&lt;/p&gt;
&lt;p&gt;
    If the evaluation of user code is intended, a proper sandboxing should be applied (see references).
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Code at risk:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
public void runCustomTrigger(String script) {
    ScriptEngineManager factory = new ScriptEngineManager();
    ScriptEngine engine = factory.getEngineByName("JavaScript");

    engine.eval(script); //Bad things can happen here.
}&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
Safe evaluation of Javascript code using "Cloudbees Rhino Sandbox" library.&lt;br/&gt;
&lt;pre&gt;
public void runCustomTrigger(String script) {
    SandboxContextFactory contextFactory = new SandboxContextFactory();
    Context context = contextFactory.makeContext();
    contextFactory.enterContext(context);
    try {
        ScriptableObject prototype = context.initStandardObjects();
        prototype.setParentScope(null);
        Scriptable scope = context.newObject(prototype);
        scope.setPrototype(prototype);

        context.evaluateString(scope,script, null, -1, null);
    } finally {
        context.exit();
    }
}&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://github.com/cloudbees/rhino-sandbox"&gt;Cloudbees Rhino Sandbox&lt;/a&gt;: Utility to create sandbox with Rhino (block access to all classes)&lt;br/&gt;
&lt;a href="http://codeutopia.net/blog/2009/01/02/sandboxing-rhino-in-java/"&gt;CodeUtopia.net: Sandboxing Rhino in Java&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html"&gt;Remote Code Execution .. by design&lt;/a&gt;: Example of malicious payload. The samples given could be used to test sandboxing rules.&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/94.html"&gt;CWE-94: Improper Control of Generation of Code ('Code Injection')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://cwe.mitre.org/data/definitions/95.html"&gt;CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='SPEL_INJECTION' priority='CRITICAL'>
    <name>Security - Potential code injection when using Spring Expression</name>
    <configKey>SPEL_INJECTION</configKey>
    <description>&lt;p&gt;
    A Spring expression is built with a dynamic value. The source of the value(s) should be verified to avoid
    that unfiltered values fall into this risky code evaluation.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Code at risk:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
public void parseExpressionInterface(Person personObj,String property) {

        ExpressionParser parser = new SpelExpressionParser();

        //Unsafe if the input is control by the user..
        Expression exp = parser.parseExpression(property+" == 'Albert'");

        StandardEvaluationContext testContext = new StandardEvaluationContext(personObj);
        boolean result = exp.getValue(testContext, Boolean.class);
[...]&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://cwe.mitre.org/data/definitions/95.html"&gt;CWE-95: Improper Neutralization of Directives in Dynamically Evaluated Code ('Eval Injection')&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://cwe.mitre.org/data/definitions/94.html"&gt;CWE-94: Improper Control of Generation of Code ('Code Injection')&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://docs.spring.io/spring-framework/docs/3.2.x/spring-framework-reference/html/expressions.html"&gt;Spring Expression Language (SpEL) - Official Documentation&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.mindedsecurity.com/fileshare/ExpressionLanguageInjection.pdf"&gt;Minded Security: Expression Language Injection&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://blog.h3xstream.com/2014/11/remote-code-execution-by-design.html"&gt;Remote Code Execution .. by design&lt;/a&gt;: Example of malicious payload. The samples given could be used to test sandboxing rules.&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>owasp-a1</tag>
    <tag>injection</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='BAD_HEXA_CONVERSION' priority='MAJOR'>
    <name>Security - Bad hexadecimal concatenation</name>
    <configKey>BAD_HEXA_CONVERSION</configKey>
    <description>&lt;p&gt;When converting a byte array containing a hash signature to a human readable string, a conversion mistake can be made if
the array is read byte by byte. The following sample illustrates the use of Integer.toHexString() which will trim any leading zeroes
from each byte of the computed hash value.
&lt;pre&gt;
MessageDigest md = MessageDigest.getInstance("SHA-1");
byte[] resultBytes = md.digest(password.getBytes("UTF-8"));

StringBuilder stringBuilder = new StringBuilder();
for(byte b :resultBytes) {
    stringBuilder.append( Integer.toHexString( b &amp; 0xFF ) );
}

return stringBuilder.toString();&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
This mistake weakens the hash value computed since it introduces more collisions.
For example, the hash values "0x0679" and "0x6709" would both output as "679" for the above function.
&lt;/p&gt;

&lt;p&gt;
In this situation, the use of toHexString() should be replaced with String.format() as follows:
&lt;pre&gt;
stringBuilder.append( String.format( "%02X", b ) );&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/704.html"&gt;CWE-704: Incorrect Type Conversion or Cast&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='HAZELCAST_SYMMETRIC_ENCRYPTION' priority='MAJOR'>
    <name>Security - Hazelcast Symmetric Encryption</name>
    <configKey>HAZELCAST_SYMMETRIC_ENCRYPTION</configKey>
    <description>&lt;p&gt;The network communications for Hazelcast is configured to use a symmetric cipher (probably DES or blowfish).&lt;/p&gt;
&lt;p&gt;Those ciphers alone do not provide integrity or secure authentication. The use of asymmetric encryption is preferred.&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection"&gt;WASC-04: Insufficient Transport Layer Protection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.hazelcast.com/documentation.jsp#Encryption"&gt;Hazelcast Documentation: Encryption (see second part)&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/326.html"&gt;CWE-326: Inadequate Encryption Strength&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='NULL_CIPHER' priority='MAJOR'>
    <name>Security - NullCipher Unsafe</name>
    <configKey>NULL_CIPHER</configKey>
    <description>&lt;p&gt;
The NullCipher is rarely used intentionally in production applications. It implements the Cipher interface by returning ciphertext
identical to the supplied plaintext. In a few contexts, such as testing, a NullCipher may be appropriate.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;Cipher doNothingCihper = new NullCipher();
[...]
//The ciphertext produced will be identical to the plaintext.
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
    Avoid using the NullCipher. Its accidental use can introduce a significant confidentiality risk.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;Reference&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/327.html"&gt;CWE-327: Use of a Broken or Risky Cryptographic Algorithm&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='UNENCRYPTED_SOCKET' priority='MAJOR'>
    <name>Security - Unencrypted Socket</name>
    <configKey>UNENCRYPTED_SOCKET</configKey>
    <description>&lt;p&gt;
The communication channel used is not encrypted. The traffic could be read by an attacker intercepting the network traffic.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
Plain socket (Cleartext communication):
&lt;pre&gt;Socket soc = new Socket("www.google.com",80);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
SSL Socket (Secure communication):
&lt;pre&gt;Socket soc = SSLSocketFactory.getDefault().createSocket("www.google.com", 443);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;Beyond using an SSL socket, you need to make sure your use of SSLSocketFactory does all the appropriate certificate validation checks to
make sure you are not subject to man-in-the-middle attacks. Please read the OWASP Transport Layer Protection Cheat Sheet for details on how
to do this correctly.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2010-A9"&gt;OWASP: Top 10 2010-A9-Insufficient Transport Layer Protection&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A6-Sensitive_Data_Exposure"&gt;OWASP: Top 10 2013-A6-Sensitive Data Exposure&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Transport_Layer_Protection_Cheat_Sheet"&gt;OWASP: Transport Layer Protection Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246945/Insufficient%20Transport%20Layer%20Protection"&gt;WASC-04: Insufficient Transport Layer Protection&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/319.html"&gt;CWE-319: Cleartext Transmission of Sensitive Information&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='DES_USAGE' priority='MAJOR'>
    <name>Security - DES / DESede Unsafe</name>
    <configKey>DES_USAGE</configKey>
    <description>&lt;p&gt;
DES and DESede (3DES) are not considered strong ciphers for modern applications. Currently, NIST recommends the
usage of AES block ciphers instead of DES/3DES.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Example weak code:&lt;/b&gt;
&lt;pre&gt;Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Example solution:&lt;/b&gt;
    &lt;pre&gt;Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://www.nist.gov/itl/fips/060205_des.cfm"&gt;NIST Withdraws Outdated Data Encryption Standard&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/326.html"&gt;CWE-326: Inadequate Encryption Strength&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='RSA_NO_PADDING' priority='MAJOR'>
    <name>Security - RSA NoPadding Unsafe</name>
    <configKey>RSA_NO_PADDING</configKey>
    <description>&lt;p&gt;
The software uses the RSA algorithm but does not incorporate Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;Cipher.getInstance("RSA/NONE/NoPadding")&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
The code should be replaced with:&lt;br/&gt;
&lt;pre&gt;Cipher.getInstance("RSA/ECB/OAEPWithMD5AndMGF1Padding")&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/780.html"&gt;CWE-780: Use of RSA Algorithm without OAEP&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://rdist.root.org/2009/10/06/why-rsa-encryption-padding-is-critical/"&gt;Root Labs: Why RSA encryption padding is critical&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='HARD_CODE_PASSWORD' priority='MAJOR'>
    <name>Security - Hard Coded Password</name>
    <configKey>HARD_CODE_PASSWORD</configKey>
    <description>&lt;p&gt;
Passwords should not be kept in the source code. The source code can be widely shared in an enterprise environment, and is
certainly shared in open source. To be managed safely, passwords and secret keys should be stored in separate configuration files or keystores.
&lt;/p&gt;
&lt;p&gt;
&lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;

&lt;pre&gt;private String SECRET_PASSWORD = "letMeIn!";

Properties props = new Properties();
props.put(Context.SECURITY_CREDENTIALS, "p@ssw0rd");&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/321.html"&gt;CWE-321: Use of Hard-coded Cryptographic Key&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/259.html"&gt;CWE-259: Use of Hard-coded Password&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='STRUTS_FORM_VALIDATION' priority='INFO'>
    <name>Security - Struts Form Without Input Validation</name>
    <configKey>STRUTS_FORM_VALIDATION</configKey>
    <description>&lt;p&gt;
Form inputs should have minimal input validation. Preventive validation helps provide defense in depth against a variety of risks.
&lt;/p&gt;
&lt;p&gt;
Validation can be introduce by implementing a &lt;code&gt;validate&lt;/code&gt; method.
&lt;pre&gt;
public class RegistrationForm extends ValidatorForm {

    private String name;
    private String email;

    [...]

    public ActionErrors validate(ActionMapping mapping, HttpServletRequest request) {
        //Validation code for name and email parameters passed in via the HttpRequest goes here
    }
}
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/106.html"&gt;CWE-106: Struts: Plug-in Framework not in Use&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XSS_REQUEST_WRAPPER' priority='MAJOR'>
    <name>Security - XSSRequestWrapper is Weak XSS Protection</name>
    <configKey>XSS_REQUEST_WRAPPER</configKey>
    <description>&lt;p&gt;
An implementation of &lt;code&gt;HttpServletRequestWrapper&lt;/code&gt; called &lt;code&gt;XSSRequestWrapper&lt;/code&gt; was published through
various blog sites. &lt;sup&gt;&lt;a href="http://java.dzone.com/articles/stronger-anti-cross-site"&gt;[1]&lt;/a&gt;&lt;/sup&gt;
&lt;sup&gt;&lt;a href="http://www.javacodegeeks.com/2012/07/anti-cross-site-scripting-xss-filter.html"&gt;[2]&lt;/a&gt;&lt;/sup&gt;
&lt;/p&gt;
&lt;p&gt;
The filtering is weak for a few reasons:
&lt;ul&gt;
&lt;li&gt;It covers only parameters not headers and side-channel inputs&lt;/li&gt;
&lt;li&gt;The replace chain can be bypass easily (see example below)&lt;/li&gt;
&lt;li&gt;It's a black list of very specific bad patterns (rather than a white list of good/valid input)&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Example of bypass:&lt;/b&gt;&lt;br/&gt;
&lt;/p&gt;
&lt;pre&gt;&amp;lt;scrivbscript:pt&amp;gt;alert(1)&amp;lt;/scrivbscript:pt&amp;gt;&lt;/pre&gt;
&lt;p&gt;
The previous input will be transformed into &lt;b&gt;&lt;code&gt;"&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;"&lt;/code&gt;&lt;/b&gt;.
The removal of &lt;code&gt;"vbscript:"&lt;/code&gt; is after the replacement of &lt;code&gt;"&amp;lt;script&amp;gt;.*&amp;lt;/script&amp;gt;"&lt;/code&gt;.
&lt;/p&gt;
&lt;p&gt;
For stronger protection, choose a solution that encodes characters automatically in the &lt;b&gt;&lt;u&gt;view&lt;/u&gt;&lt;/b&gt; (template, jsp, ...) following
the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting"&gt;WASC-8: Cross Site Scripting&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet"&gt;OWASP: XSS Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29"&gt;OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/79.html"&gt;CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a3</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='BLOWFISH_KEY_SIZE' priority='MAJOR'>
    <name>Security - Blowfish Usage with Weak Key Size</name>
    <configKey>BLOWFISH_KEY_SIZE</configKey>
    <description>&lt;p&gt;
The Blowfish cipher supports keysizes from 32 bits to 448 bits. A small key size makes the ciphertext vulnerable to brute force attacks.
At least 128 bits of entropy should be used when generating the key if the usage of Blowfish must be retained.
&lt;/p&gt;
&lt;p&gt;
If the algorithm can be changed, the AES block cipher should be used instead.
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");
keyGen.init(64);&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;KeyGenerator keyGen = KeyGenerator.getInstance("Blowfish");
keyGen.init(128);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://en.wikipedia.org/wiki/Blowfish_(cipher)"&gt;Blowfish (cipher)&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/326.html"&gt;CWE-326: Inadequate Encryption Strength&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='RSA_KEY_SIZE' priority='MAJOR'>
    <name>Security - RSA Usage with Weak Key Size</name>
    <configKey>RSA_KEY_SIZE</configKey>
    <description>&lt;p&gt;"RSA Laboratories currently recommends key sizes of 1024 bits for corporate use and 2048 bits for extremely valuable keys
like the root key pair used by a certifying authority". &lt;sup&gt;[1]&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
keyGen.initialize(512);
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;&lt;b&gt;Solution:&lt;/b&gt;&lt;br/&gt;
The KeyPairGenerator creation should be as follows with at least 2048 bit key size.&lt;br/&gt;
&lt;pre&gt;
KeyPairGenerator keyGen = KeyPairGenerator.getInstance("RSA");
keyGen.initialize(2048);
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
[1] &lt;a href="http://www.emc.com/emc-plus/rsa-labs/standards-initiatives/how-large-a-key-should-be-used.htm"&gt;RSA Laboratories: 3.1.5 How large a key should be used in the RSA cryptosystem?&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://en.wikipedia.org/wiki/Key_size#Asymmetric%5Falgorithm%5Fkey%5Flengths"&gt;Wikipedia: Asymmetric algorithm key lengths&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/326.html"&gt;CWE-326: Inadequate Encryption Strength&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://www.keylength.com/en/compare/"&gt;Keylength.com (BlueKrypt): Aggregate key length recommendations.&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='UNVALIDATED_REDIRECT' priority='MAJOR'>
    <name>Security - Unvalidated Redirect</name>
    <configKey>UNVALIDATED_REDIRECT</configKey>
    <description>&lt;p&gt;
    Unvalidated redirects occur when an application redirects a user to a destination URL specified by a user supplied
    parameter that is not validated. Such vulnerabilities can be used to facilitate phishing attacks.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Scenario&lt;/b&gt;&lt;br/&gt;
    1. A user is tricked into visiting the malicious URL: http://website.com/login?redirect=http://evil.vvebsite.com/fake/login&lt;br/&gt;
    2. The user is redirected to a fake login page that looks like a site they trust. (http://evil.vvebsite.com/fake/login)&lt;br/&gt;
    3. The user enters his credentials.&lt;br/&gt;
    4. The evil site steals the user's credentials and redirects him to the original website.&lt;br/&gt;
    &lt;br/&gt;
    This attack is plausible because most users don't double check the URL after the redirection. Also, redirection to
    an authentication page is very common.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;/br/&gt;
    &lt;pre&gt;protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    [...]
    resp.sendRedirect(req.getParameter("redirectUrl"));
    [...]
}&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution/Countermeasures:&lt;/b&gt;&lt;br/&gt;
    &lt;ul&gt;
        &lt;li&gt;Don't accept redirection destinations from users&lt;/li&gt;
        &lt;li&gt;Accept a destination key, and use it to look up the target (legal) destination&lt;/li&gt;
        &lt;li&gt;Accept only relative paths&lt;/li&gt;
        &lt;li&gt;White list URLs (if possible)&lt;/li&gt;
        &lt;li&gt;Validate that the beginning of the URL is part of a white list&lt;/li&gt;
    &lt;/ul&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246981/URL%20Redirector%20Abuse"&gt;WASC-38: URL Redirector Abuse&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A10-Unvalidated_Redirects_and_Forwards"&gt;OWASP: Top 10 2013-A10: Unvalidated Redirects and Forwards&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Unvalidated_Redirects_and_Forwards_Cheat_Sheet"&gt;OWASP: Unvalidated Redirects and Forwards Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/601.html"&gt;CWE-601: URL Redirection to Untrusted Site ('Open Redirect')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XSS_JSP_PRINT' priority='CRITICAL'>
    <name>Security - Potential XSS in JSP</name>
    <configKey>XSS_JSP_PRINT</configKey>
    <description>&lt;p&gt;NOTE: If you want this rule to work, you have to precompile your JSPs (which usually isn't done in most build environments)
and then provide FindBugs the path information to the generated class files and the original JSPs themselves. If you are seeing
findings for this rule, you know you have your environment set up properly. Also, this XSS in JSP rule looks for similar issues,
but looks for them in a different way than the existing 'XSS: JSP reflected cross site scripting vulnerability' rule in FindBugs.&lt;/p&gt;
&lt;p&gt;A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;
    &lt;pre&gt;&lt;%
String taintedInput = (String) request.getAttribute("input");
%&gt;
[...]
&lt;%= taintedInput %&gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;
    &lt;pre&gt;
&lt;%
String taintedInput = (String) request.getAttribute("input");
%&gt;
[...]
&lt;%= Encode.forHtml(taintedInput) %&gt;
    &lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting"&gt;WASC-8: Cross Site Scripting&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet"&gt;OWASP: XSS Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29"&gt;OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/79.html"&gt;CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://code.google.com/p/owasp-java-encoder/"&gt;OWASP Java Encoder&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>owasp-a3</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XSS_SERVLET' priority='CRITICAL'>
    <name>Security - Potential XSS in Servlet</name>
    <configKey>XSS_SERVLET</configKey>
    <description>&lt;p&gt;
A potential XSS was found. It could be used to execute unwanted JavaScript in a client's browser. (See references)
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;
&lt;pre&gt;protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(input1);
}&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;
&lt;pre&gt;protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
    String input1 = req.getParameter("input1");
    [...]
    resp.getWriter().write(Encode.forHtml(input1));
}&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
The best defense against XSS is context sensitive output encoding like the example above. There are typically 4 contexts to consider:
HTML, JavaScript, CSS (styles), and URLs. Please follow the XSS protection rules defined in the OWASP XSS Prevention Cheat Sheet,
which explains these defenses in significant detail.
&lt;/p&gt;
&lt;p&gt;Note that this XSS in Servlet rule looks for similar issues, but looks for them in a different way than the existing
'XSS: Servlet reflected cross site scripting vulnerability' and 'XSS: Servlet reflected cross site scripting vulnerability in error page' rules in FindBugs.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting"&gt;WASC-8: Cross Site Scripting&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet"&gt;OWASP: XSS Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29"&gt;OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/79.html"&gt;CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://code.google.com/p/owasp-java-encoder/"&gt;OWASP Java Encoder&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>owasp-a3</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='XML_DECODER' priority='CRITICAL'>
    <name>Security - XMLDecoder usage</name>
    <configKey>XML_DECODER</configKey>
    <description>&lt;p&gt;
    XMLDecoder should not be used to parse untrusted data. Deserializing user input can lead to arbitrary code execution.
    This is possible because XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods,
    but in practice, any method can be called.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Malicious XML example:&lt;/b&gt;
&lt;/p&gt;
&lt;pre&gt;
&amp;lt;?xml version="1.0" encoding="UTF-8" ?&amp;gt;
&amp;lt;java version="1.4.0" class="java.beans.XMLDecoder"&amp;gt;
  &amp;lt;object class="java.io.PrintWriter"&amp;gt;
    &amp;lt;string&gt;/tmp/Hacked.txt&amp;lt;/string&amp;gt;
    &amp;lt;void method="println"&amp;gt;
      &amp;lt;string&gt;Hello World!&amp;lt;/string&amp;gt;
    &amp;lt;/void&amp;gt;
    &amp;lt;void method="close"/&amp;gt;
  &amp;lt;/object&amp;gt;
&amp;lt;/java&amp;gt;
&lt;/pre&gt;
&lt;p&gt;
The XML code above will cause the creation of a file with the content "Hello World!".
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;/br/&gt;
    &lt;pre&gt;XMLDecoder d = new XMLDecoder(in);
try {
    Object result = d.readObject();
}
[...]&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Solution:&lt;/b&gt;&lt;/br/&gt;
The solution is to avoid using XMLDecoder to parse content from an untrusted source.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://blog.diniscruz.com/2013/08/using-xmldecoder-to-execute-server-side.html"&gt;Dinis Cruz Blog: Using XMLDecoder to execute server-side Java Code on an Restlet application&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://securityblog.redhat.com/2014/01/23/java-deserialization-flaws-part-2-xml-deserialization/"&gt;RedHat blog : Java deserialization flaws: Part 2, XML deserialization&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/20.html"&gt;CWE-20: Improper Input Validation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='STATIC_IV' priority='MAJOR'>
    <name>Security - Static IV</name>
    <configKey>STATIC_IV</configKey>
    <description>&lt;p&gt;
    Initialization vector must be regenerated for each message to be encrypted.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;Vulnerable Code:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
private static byte[] IV = new byte[16] {(byte)0,(byte)1,(byte)2,[...]};

public void encrypt(String message) throws Exception {

    IvParameterSpec ivSpec = new IvParameterSpec(IV);
[...]
&lt;/pre&gt;
&lt;p&gt;&lt;b&gt;Solution:&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
&lt;pre&gt;
public void encrypt(String message) throws Exception {

    byte[] iv = new byte[16];
    new SecureRandom().nextBytes(iv);

    IvParameterSpec ivSpec = new IvParameterSpec(iv);
[...]
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://en.wikipedia.org/wiki/Initialization_vector"&gt;Wikipedia: Initialization vector&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://cwe.mitre.org/data/definitions/329.html"&gt;CWE-329: Not Using a Random IV with CBC Mode&lt;/a&gt;&lt;br/&gt;
&lt;a href="https://defuse.ca/cbcmodeiv.htm"&gt;Encryption - CBC Mode IV: Secret or Not?&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='ECB_MODE' priority='MAJOR'>
    <name>Security - ECB Mode Unsafe</name>
    <configKey>ECB_MODE</configKey>
    <description>&lt;p&gt;An authentication cipher mode which provides better confidentiality of the encrypted data should be used instead of Electronic Codebook (ECB) mode,
which does not provide good confidentiality. Specifically, ECB mode produces the same output for the same input each time. So,
for example, if a user is sending a password, the encrypted value is the same each time. This allows an attacker to intercept
and replay the data.&lt;/p&gt;
&lt;p&gt;
To fix this, something like Galois/Counter Mode (GCM) should be used instead.
&lt;/p&gt;
&lt;p&gt;
&lt;b&gt;Code at risk:&lt;/b&gt;
    &lt;pre&gt;Cipher c = Cipher.getInstance("AES/ECB/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;
    &lt;pre&gt;Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
&lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
&lt;a href="http://en.wikipedia.org/wiki/Authenticated_encryption"&gt;Wikipedia: Authenticated encryption&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01"&gt;NIST: Authenticated Encryption Modes&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://en.wikipedia.org/wiki/Block_cipher_modes_of_operation#Electronic_codebook_.28ECB.29"&gt;Wikipedia: Block cipher modes of operation&lt;/a&gt;&lt;br/&gt;
&lt;a href="http://csrc.nist.gov/publications/nistpubs/800-38a/sp800-38a.pdf"&gt;NIST: Recommendation for Block Cipher Modes of Operation&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>security</tag>
  </rule>
  <rule key='PADDING_ORACLE' priority='MAJOR'>
    <name>Security - Cipher is Susceptible to Padding Oracle</name>
    <configKey>PADDING_ORACLE</configKey>
    <description>&lt;p&gt;
    This specific mode of CBC with PKCS5Padding is susceptible to padding oracle attacks. An adversary could potentially decrypt the
    message if the system exposed the difference between plaintext with invalid padding or valid padding. The distinction between
    valid and invalid padding is usually revealed through distinct error messages being returned for each condition.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;
    &lt;pre&gt;Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;
    &lt;pre&gt;Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://www.infobytesec.com/down/paddingoracle_openjam.pdf"&gt;Padding Oracles for the masses (by Matias Soler)&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://en.wikipedia.org/wiki/Authenticated_encryption"&gt;Wikipedia: Authenticated encryption&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01"&gt;NIST: Authenticated Encryption Modes&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://capec.mitre.org/data/definitions/463.html"&gt;CAPEC: Padding Oracle Crypto Attack&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://cwe.mitre.org/data/definitions/696.html"&gt;CWE-696: Incorrect Behavior Order&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='CIPHER_INTEGRITY' priority='MAJOR'>
    <name>Security - Cipher With No Integrity</name>
    <configKey>CIPHER_INTEGRITY</configKey>
    <description>&lt;p&gt;
    The ciphertext produced is susceptible to alteration by an adversary. This mean that the cipher provides no way to detect that the
    data has been tampered with. If the ciphertext can be controlled by an attacker, it could be altered without detection.
&lt;/p&gt;
&lt;p&gt;
    The solution is to used a cipher that includes a Hash based Message Authentication Code (HMAC) to sign the data. Combining a HMAC function to the
    existing cipher is prone to error &lt;sup&gt;&lt;a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/"&gt;[1]&lt;/a&gt;&lt;/sup&gt;. Specifically,
    it is always recommended that you be able to verify the HMAC first, and only if the data is unmodified, do you then perform any cryptographic
    functions on the data.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
    &lt;i&gt;AES in CBC mode&lt;/i&gt;&lt;br/&gt;

    &lt;pre&gt;Cipher c = Cipher.getInstance("AES/CBC/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
    &lt;br/&gt;
    &lt;i&gt;Triple DES with ECB mode&lt;/i&gt;&lt;br/&gt;

&lt;pre&gt;Cipher c = Cipher.getInstance("DESede/ECB/PKCS5Padding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution:&lt;/b&gt;
    &lt;pre&gt;Cipher c = Cipher.getInstance("AES/GCM/NoPadding");
c.init(Cipher.ENCRYPT_MODE, k, iv);
byte[] cipherText = c.doFinal(plainText);&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
In the example solution above, the GCM mode introduces an HMAC into the resulting encrypted data, providing integrity of the result.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://en.wikipedia.org/wiki/Authenticated_encryption"&gt;Wikipedia: Authenticated encryption&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://csrc.nist.gov/groups/ST/toolkit/BCM/modes_development.html#01"&gt;NIST: Authenticated Encryption Modes&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://www.thoughtcrime.org/blog/the-cryptographic-doom-principle/"&gt;Moxie Marlinspike's blog: The Cryptographic Doom Principle&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://cwe.mitre.org/data/definitions/353.html"&gt;CWE-353: Missing Support for Integrity Check&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a6</tag>
    <tag>cryptography</tag>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='ESAPI_ENCRYPTOR' priority='INFO'>
    <name>Security - Usage of ESAPI Encryptor</name>
    <configKey>ESAPI_ENCRYPTOR</configKey>
    <description>&lt;p&gt;
    The ESAPI has a small history of vulnerabilities within the cryptography component. Here is a quick validation list to
    make sure the Authenticated Encryption is working as expected.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;1. Library Version&lt;/b&gt;&lt;/p&gt;
&lt;p&gt;
    This issue is corrected in ESAPI version 2.1.0. Versions &lt;= 2.0.1 are vulnerable to a MAC bypass (CVE-2013-5679).&lt;br/&gt;
&lt;/p&gt;
&lt;p&gt;
    For Maven users, the plugin &lt;a href="http://mojo.codehaus.org/versions-maven-plugin/"&gt;versions&lt;/a&gt; can called using the
    following command. The effective version of ESAPI will be available in the output.&lt;br/&gt;
    &lt;pre&gt;$ mvn versions:display-dependency-updates&lt;/pre&gt;
    &lt;br/&gt;Output:&lt;br/&gt;
    &lt;pre&gt;
[...]
[INFO] The following dependencies in Dependencies have newer versions:
[INFO]   org.slf4j:slf4j-api ................................... 1.6.4 -&gt; 1.7.7
[INFO]   org.owasp.esapi:esapi ................................. 2.0.1 -&gt; 2.1.0
[...]
    &lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    or by looking at the configuration directly.&lt;br/&gt;
    &lt;pre&gt;
&amp;lt;dependency&amp;gt;
    &amp;lt;groupId&amp;gt;org.owasp.esapi&amp;lt;/groupId&amp;gt;
    &amp;lt;artifactId&amp;gt;esapi&amp;lt;/artifactId&amp;gt;
    &amp;lt;version&amp;gt;2.1.0&amp;lt;/version&amp;gt;
&amp;lt;/dependency&amp;gt;&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    For Ant users, the jar used should be &lt;a href="http://repo1.maven.org/maven2/org/owasp/esapi/esapi/2.1.0/esapi-2.1.0.jar"&gt;esapi-2.1.0.jar&lt;/a&gt;.
&lt;/p&gt;
&lt;p&gt;&lt;b&gt;2. Configuration:&lt;/b&gt;&lt;/p&gt;
    &lt;p&gt;
    The library version 2.1.0 is still vulnerable to key size being changed in the ciphertext definition (CVE-2013-5960). Some precautions need to be taken.&lt;br/&gt;
    &lt;br/&gt;
    &lt;div&gt;&lt;b&gt;The cryptographic configuration of ESAPI can also be vulnerable if any of these elements are present:&lt;/b&gt;&lt;br/&gt;
    &lt;b&gt;Insecure configuration:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
Encryptor.CipherText.useMAC=false

Encryptor.EncryptionAlgorithm=AES
Encryptor.CipherTransformation=AES/CBC/PKCS5Padding

Encryptor.cipher_modes.additional_allowed=CBC&lt;/pre&gt;
    &lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;div&gt;
    &lt;b&gt;Secure configuration:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
#Needed
Encryptor.CipherText.useMAC=true

#Needed to have a solid auth. encryption
Encryptor.EncryptionAlgorithm=AES
Encryptor.CipherTransformation=AES/GCM/NoPadding

#CBC mode should be removed to avoid padding oracle
Encryptor.cipher_modes.additional_allowed=&lt;/pre&gt;
    &lt;/div&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://owasp-esapi-java.googlecode.com/svn/trunk/documentation/ESAPI-security-bulletin1.pdf"&gt;ESAPI Security bulletin 1 (CVE-2013-5679)&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://nvd.nist.gov/view/vuln/detail?vulnId=CVE-2013-5679"&gt;Vulnerability Summary for CVE-2013-5679&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://www.synacktiv.com/ressources/synacktiv_owasp_esapi_hmac_bypass.pdf"&gt;Synactiv: Bypassing HMAC validation in OWASP ESAPI symmetric encryption&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://cwe.mitre.org/data/definitions/310.html"&gt;CWE-310: Cryptographic Issues&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://lists.owasp.org/pipermail/esapi-dev/2015-March/002533.html"&gt;ESAPI-dev mailing list: Status of CVE-2013-5960&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>security</tag>
  </rule>
  <rule key='ANDROID_EXTERNAL_FILE_ACCESS' priority='INFO'>
    <name>Security - External File Access (Android)</name>
    <configKey>ANDROID_EXTERNAL_FILE_ACCESS</configKey>
    <description>&lt;p&gt;
    The application write data to external storage (potentially SD card). There are multiple security implication to this
    action. First, file store on SD card will be accessible to the application having the
    &lt;a href="http://developer.android.com/reference/android/Manifest.permission.html#READ_EXTERNAL_STORAGE"&gt;&lt;code&gt;READ_EXTERNAL_STORAGE&lt;/code&gt;&lt;/a&gt; permission.
    Also, if the data persisted contains confidential information about the user, encryption would be needed.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
file file = new File(getExternalFilesDir(TARGET_TYPE), filename);
fos = new FileOutputStream(file);
fos.write(confidentialData.getBytes());
fos.flush();
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Better alternative:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
fos = openFileOutput(filename, Context.MODE_PRIVATE);
fos.write(string.getBytes());
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/training/articles/security-tips.html#ExternalStorage"&gt;Android Official Doc: Security Tips&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.securecoding.cert.org/confluence/display/java/DRD00-J.+Do+not+store+sensitive+information+on+external+storage+%28SD+card%29+unless+encrypted+first"&gt;CERT: DRD00-J: Do not store sensitive information on external storage [...]&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/guide/topics/data/data-storage.html#filesExternal"&gt;Android Official Doc: Using the External Storage&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.owasp.org/index.php/Mobile_Top_10_2014-M2"&gt;OWASP Mobile Top 10 2014-M2: Insecure Data Storage&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/312.html"&gt;CWE-312: Cleartext Storage of Sensitive Information&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>android</tag>
    <tag>security</tag>
  </rule>
  <rule key='ANDROID_BROADCAST' priority='INFO'>
    <name>Security - Broadcast (Android)</name>
    <configKey>ANDROID_BROADCAST</configKey>
    <description>&lt;p&gt;
    Broadcast intents can be listen by any application with the appropriate permission. It is suggest to avoid transmitting
    sensitive information when possible.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
Intent i = new Intent();
i.setAction("com.insecure.action.UserConnected");
i.putExtra("username", user);
i.putExtra("email", email);
i.putExtra("session", newSessionId);

this.sendBroadcast(v1);
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;Solution (if possible):&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
Intent i = new Intent();
i.setAction("com.secure.action.UserConnected");

sendBroadcast(v1);
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;Configuration (receiver)&lt;sup&gt;[1] Source: StackOverflow&lt;/sup&gt;:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
&amp;lt;manifest ...&amp;gt;

    &amp;lt;!-- Permission declaration --&amp;gt;
    &amp;lt;permission android:name="my.app.PERMISSION" /&amp;gt;

    &amp;lt;receiver
        android:name="my.app.BroadcastReceiver"
        android:permission="com.secure.PERMISSION"&amp;gt; &amp;lt;!-- Permission enforcement --&amp;gt;
        &amp;lt;intent-filter&gt;
            &amp;lt;action android:name="com.secure.action.UserConnected" /&amp;gt;
        &amp;lt;/intent-filter&amp;gt;
    &amp;lt;/receiver&amp;gt;

    ...
&amp;lt;/manifest&gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Configuration (receiver)&lt;sup&gt;[1] Source: StackOverflow&lt;/sup&gt;:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
&amp;lt;manifest&amp;gt;
    &amp;lt;!-- We declare we own the permission to send broadcast to the above receiver --&amp;gt;
    &amp;lt;uses-permission android:name="my.app.PERMISSION" /&amp;gt;
&amp;lt;/manifest&amp;gt;
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="https://www.securecoding.cert.org/confluence/display/java/DRD03-J.+Do+not+broadcast+sensitive+information+using+an+implicit+intent"&gt;CERT: DRD03-J. Do not broadcast sensitive information using an implicit intent&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/reference/android/content/BroadcastReceiver.html#Security"&gt;Android Official Doc: BroadcastReceiver (Security)&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/guide/topics/manifest/receiver-element.html"&gt;Android Official Doc: Receiver configuration (see &lt;code&gt;android:permission&lt;/code&gt;)&lt;/a&gt;&lt;br/&gt;
    &lt;sup&gt;[1]&lt;/sup&gt; &lt;a href="http://stackoverflow.com/a/21513368/89769"&gt;StackOverflow: How to set permissions in broadcast sender and receiver in android&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/925.html"&gt;CWE-925: Improper Verification of Intent by Broadcast Receiver&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/927.html"&gt;CWE-927: Use of Implicit Intent for Sensitive Communication&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>android</tag>
    <tag>security</tag>
  </rule>
  <rule key='ANDROID_WORLD_WRITABLE' priority='INFO'>
    <name>Security - World Writable File (Android)</name>
    <configKey>ANDROID_WORLD_WRITABLE</configKey>
    <description>&lt;p&gt;
    The file written in this context is using the creation mode &lt;code&gt;MODE_WORLD_READABLE&lt;/code&gt;. It might not be the
    expected behavior to exposed the content being written.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
fos = openFileOutput(filename, MODE_WORLD_READABLE);
fos.write(userInfo.getBytes());
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;Solution (using MODE_PRIVATE):&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
fos = openFileOutput(filename, MODE_PRIVATE);
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Solution (using local SQLite Database):&lt;/b&gt;&lt;br/&gt;

Using a local SQLite database is probably the best solution to store structured data. Make sure the database file is not
create on external storage. See references below for implementation guidelines.
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="https://www.securecoding.cert.org/confluence/display/java/DRD11-J.+Ensure+that+sensitive+data+is+kept+secure"&gt;CERT: DRD11-J. Ensure that sensitive data is kept secure&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/training/articles/security-tips.html#InternalStorage"&gt;Android Official Doc: Security Tips&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/reference/android/content/Context.html#MODE_PRIVATE"&gt;Android Official Doc: Context.MODE_PRIVATE&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://www.vogella.com/tutorials/AndroidSQLite/article.html#databasetutorial_database"&gt;vogella.com: Android SQLite database and content provider - Tutorial&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.owasp.org/index.php/Mobile_Top_10_2014-M2"&gt;OWASP Mobile Top 10 2014-M2: Insecure Data Storage&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/312.html"&gt;CWE-312: Cleartext Storage of Sensitive Information&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>android</tag>
    <tag>security</tag>
  </rule>
  <rule key='ANDROID_GEOLOCATION' priority='INFO'>
    <name>Security - WebView with Geolocation Activated (Android)</name>
    <configKey>ANDROID_GEOLOCATION</configKey>
    <description>&lt;p&gt;
    It is suggest to ask the user for a confirmation about obtaining its geolocation.
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
&lt;pre&gt;
webView.setWebChromeClient(new WebChromeClient() {
    @Override
    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
        callback.invoke(origin, true, false);
    }
});
&lt;/pre&gt;
&lt;/p&gt;
&lt;p&gt;
    &lt;b&gt;Suggest code:&lt;/b&gt;&lt;br/&gt;

    Limit the sampling of geolocation and ask the user for confirmation.
&lt;pre&gt;
webView.setWebChromeClient(new WebChromeClient() {
    @Override
    public void onGeolocationPermissionsShowPrompt(String origin, GeolocationPermissions.Callback callback) {
        callback.invoke(origin, true, false);

        //Ask the user for confirmation
    }
});
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="https://www.securecoding.cert.org/confluence/display/java/DRD15-J.+Consider+privacy+concerns+when+using+Geolocation+API"&gt;CERT: DRD15-J. Consider privacy concerns when using Geolocation API&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://en.wikipedia.org/wiki/W3C_Geolocation_API"&gt;Wikipedia: W3C Geolocation API&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://dev.w3.org/geo/api/spec-source.html"&gt;W3C: Geolocation Specification&lt;/a&gt;&lt;br/&gt;
&lt;/p&gt;</description>
    <tag>android</tag>
    <tag>security</tag>
  </rule>
  <rule key='ANDROID_WEB_VIEW_JAVASCRIPT' priority='INFO'>
    <name>Security - WebView with JavaScript Enabled (Android)</name>
    <configKey>ANDROID_WEB_VIEW_JAVASCRIPT</configKey>
    <description>&lt;p&gt;
    Enabling JavaScript for the WebView means that it is now susceptible to XSS. The page render should be inspected
    for potential reflected XSS, stored XSS and DOM XSS.&lt;br/&gt;
&lt;pre&gt;
WebView myWebView = (WebView) findViewById(R.id.webView);
WebSettings webSettings = myWebView.getSettings();
webSettings.setJavaScriptEnabled(true);
&lt;/pre&gt;
&lt;/p&gt;

&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
Enabling is JavaScript is not a bad practice. It just means that the backend code need to be audit for potential XSS.
The XSS can also be introduce client-side with DOM XSS.
&lt;pre&gt;
function updateDescription(newDescription) {
    $("#userDescription").html("&lt;p&gt;"+newDescription+"&lt;/p&gt;");
}
&lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://www.technotalkative.com/issue-using-setjavascriptenabled-can-introduce-xss-vulnerabilities-application-review-carefully/"&gt;Issue: Using setJavaScriptEnabled can introduce XSS vulnerabilities&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/guide/webapps/webview.html#UsingJavaScript"&gt;Android Official Doc: WebView&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://projects.webappsec.org/w/page/13246920/Cross%20Site%20Scripting"&gt;WASC-8: Cross Site Scripting&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.owasp.org/index.php/XSS_%28Cross_Site_Scripting%29_Prevention_Cheat_Sheet"&gt;OWASP: XSS Prevention Cheat Sheet&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://www.owasp.org/index.php/Top_10_2013-A3-Cross-Site_Scripting_%28XSS%29"&gt;OWASP: Top 10 2013-A3: Cross-Site Scripting (XSS)&lt;/a&gt;&lt;br/&gt;
    &lt;a href="http://cwe.mitre.org/data/definitions/79.html"&gt;CWE-79: Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>owasp-a3</tag>
    <tag>wasc</tag>
    <tag>cwe</tag>
    <tag>android</tag>
    <tag>security</tag>
  </rule>
  <rule key='ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACE' priority='INFO'>
    <name>Security - WebView with Javascript Interface (Android)</name>
    <configKey>ANDROID_WEB_VIEW_JAVASCRIPT_INTERFACE</configKey>
    <description>&lt;p&gt;
    The use Javascript Interface could expose the WebView to risky API. If an XSS is trigger in the WebView, the class
    could be call by the malicious JavaScript code.
&lt;/p&gt;

&lt;p&gt;
    &lt;b&gt;Code at risk:&lt;/b&gt;&lt;br/&gt;
    &lt;pre&gt;
WebView myWebView = (WebView) findViewById(R.id.webView);

myWebView.addJavascriptInterface(new FileWriteUtil(this), "fileWriteUtil");

WebSettings webSettings = myWebView.getSettings();
webSettings.setJavaScriptEnabled(true);

[...]
class FileWriteUtil {
    Context mContext;

    FileOpenUtil(Context c) {
        mContext = c;
    }

    public void writeToFile(String data, String filename, String tag) {
        [...]
    }
}
    &lt;/pre&gt;
&lt;/p&gt;
&lt;br/&gt;
&lt;p&gt;
    &lt;b&gt;References&lt;/b&gt;&lt;br/&gt;
    &lt;a href="http://developer.android.com/reference/android/webkit/WebView.html#addJavascriptInterface%28java.lang.Object,%20java.lang.String%29"&gt;Android Official Doc: WebView.addJavascriptInterface()&lt;/a&gt;&lt;br/&gt;
    &lt;a href="https://cwe.mitre.org/data/definitions/749.html"&gt;CWE-749: Exposed Dangerous Method or Function&lt;/a&gt;
&lt;/p&gt;</description>
    <tag>cwe</tag>
    <tag>android</tag>
    <tag>security</tag>
  </rule>
</rules>